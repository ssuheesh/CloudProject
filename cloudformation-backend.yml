AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: "backend api"
    Default: "backend-api"
  apiStageName:
    Type: "String"
    Description: Version of the api
    Default: "v1"
  apiResourcePath:
    Type: "String"
    Description: Resource Path for API.
    Default: "user"
  lambdaCodeS3Bucket:
    Type: "String"
    Description: "S3 bucket name where the Lambda function code is stored"
    Default: "project-lambda-version-store"
  lambdaCodeS3Key:
    Type: "String"
    Description: "S3 object key for the Lambda function code ZIP file"
    Default: "backend-api.zip"
  lambdaLayerS3Key:
    Type: "String"
    Description: "S3 object key for the Lambda layer ZIP file"
    Default: "layer-api.zip"
  S3BucketName:
    Type: String
    Description: "Name of the S3 bucket for image uploads"
    Default: "cs516-final-project-image-bucket"

Resources:
  # IAM Role for API Gateway to Write to CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # DynamoDB Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # On-demand

  # API Gateway Rest API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: An API Gateway for Lambda APIs
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-api"]]

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"

  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"


  # Base Resource for "user"
  UserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: !Ref "apiResourcePath"

  # Resource for "user/signup"
  UserSignupResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: "signup"

  # Resource for "user/login"
  UserLoginResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: "login"

  # Resource for "user/updateprofile"
  UserUpdateProfileResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: "updateprofile"

  # Resource for "user/profile"
  UserProfileResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: "profile"

  # Method for POST /user/signup
  UserSignupMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UserSignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  # Method for POST /user/login
  UserLoginMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UserLoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  # Method for PUT /user/updateprofile
  UserUpdateProfileMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UserUpdateProfileResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
  
  # Method for GET /user/profile
  UserProfileMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UserUpdateProfileResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  # API Gateway Stage
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref "apiStageName"
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: "OFF"
          DataTraceEnabled: false
          MetricsEnabled: true

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UserSignupMethod
      - UserLoginMethod
      - UserUpdateProfileMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  # IAM Role for API Gateway
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaCodeS3Bucket
        S3Key: !Ref lambdaCodeS3Key
      Description: "API Lambda function"
      FunctionName: !Ref lambdaFunctionName
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs22.x
      Timeout: 60
      Layers:
        - !Ref LambdaLayer

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: "Initial version of the Lambda function"

  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Name: backend-api
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version


  # IAM Role for Lambda
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:*
                  - dax:*
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:ListSubscriptions
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:SetTopicAttributes
                  - lambda:CreateFunction
                  - lambda:ListFunctions
                  - lambda:ListEventSourceMappings
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetFunctionConfiguration
                  - lambda:DeleteFunction
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
                Effect: Allow
              - Action:
                  - dynamodb:*
                  - dax:*
                  - application-autoscaling:DeleteScalingPolicy
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:DescribeScalingActivities
                  - application-autoscaling:DescribeScalingPolicies
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:RegisterScalableTarget
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:GetMetricData
                  - datapipeline:ActivatePipeline
                  - datapipeline:CreatePipeline
                  - datapipeline:DeletePipeline
                  - datapipeline:DescribeObjects
                  - datapipeline:DescribePipelines
                  - datapipeline:GetPipelineDefinition
                  - datapipeline:ListPipelines
                  - datapipeline:PutPipelineDefinition
                  - datapipeline:QueryObjects
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - iam:GetRole
                  - iam:ListRoles
                  - kms:DescribeKey
                  - kms:ListAliases
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:ListSubscriptions
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:SetTopicAttributes
                  - lambda:CreateFunction
                  - lambda:ListFunctions
                  - lambda:ListEventSourceMappings
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetFunctionConfiguration
                  - lambda:DeleteFunction
                  - resource-groups:ListGroups
                  - resource-groups:ListGroupResources
                  - resource-groups:GetGroup
                  - resource-groups:GetGroupQuery
                  - resource-groups:DeleteGroup
                  - resource-groups:CreateGroup
                  - tag:GetResources
                  - kinesis:ListStreams
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                Effect: Allow
                Resource: '*'
              - Action:
                  - cloudwatch:GetInsightRuleReport
                Effect: Allow
                Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource: '*'
                Condition:
                  StringLike:
                    iam:PassedToService:
                      - application-autoscaling.amazonaws.com
                      - application-autoscaling.amazonaws.com.cn
                      - dax.amazonaws.com
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - replication.dynamodb.amazonaws.com
                      - dax.amazonaws.com
                      - dynamodb.application-autoscaling.amazonaws.com
                      - contributorinsights.dynamodb.amazonaws.com
                      - kinesisreplication.dynamodb.amazonaws.com
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: '*'
          PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 3

  # API Gateway Usage Plan
  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ApiGatewayStage
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGatewayRestApi
        Stage: !Ref "apiStageName"    
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  # Lambda Layer
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Join ["", [{"Ref": "AWS::StackName"}, "-layer"]]
      Description: "Lambda layer for shared dependencies"
      Content:
        S3Bucket: !Ref lambdaCodeS3Bucket
        S3Key: !Ref lambdaLayerS3Key
      CompatibleRuntimes:
        - nodejs20.x
        - nodejs22.x

  # S3 Bucket for Image Uploads
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketPolicy:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "Statement1"
              Effect: "Allow"
              Principal: "*"
              Action:
                - "s3:DeleteObject"
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${ImageBucket.Arn}/*"